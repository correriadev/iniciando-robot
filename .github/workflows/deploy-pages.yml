name: DEPLOY_GITHUB_PAGES

on:
  workflow_run:
    workflows: ["ROBOT_TESTS_CI"]
    types:
      - completed

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    if: github.event.workflow_run.conclusion == 'success'
    
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: ⬇️ Download artifact from the completed workflow
        uses: actions/download-artifact@v4
        with:
          name: robot-test-reports
          path: public
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: ⚙️ Configure Pages
        uses: actions/configure-pages@v5

      - name: 📦 Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: 📢 Publish to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 📊 Check test results and send to Gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Verifica se o output.xml existe
          if [ ! -f public/output.xml ]; then
            echo "Arquivo output.xml não encontrado!"
            exit 1
          fi

          # Extrai o número de falhas
          FAILED_COUNT=$(grep -oP 'fail="\K[0-9]+' public/output.xml | head -1)
          if [ -z "$FAILED_COUNT" ]; then
            FAILED_COUNT=0
          fi

          # Define o prompt conforme o número de falhas
          if [ "$FAILED_COUNT" -eq 0 ]; then
            PROMPT="Todos os testes passaram com sucesso. Não há erros. Pode confirmar que o sistema está saudável?"
          else
            PROMPT="Foram encontrados $FAILED_COUNT erros nos testes automatizados. Abaixo está um trecho do relatório. Forneça insights ou possíveis causas para as falhas."
          fi

          # Pega os primeiros 50 linhas do relatório (ajuste conforme necessário)
          SUMMARY=$(head -n 50 public/report.html | sed 's/"/\\"/g')

          # Monta e envia o JSON corretamente com a chave na URL
          curl -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$GEMINI_API_KEY" \
          -H "Content-Type: application/json" \
          -d "{
                \"contents\": [
                  {\"role\": \"user\", \"parts\": [{\"text\": \"$PROMPT\"}]},
                  {\"role\": \"user\", \"parts\": [{\"text\": \"$SUMMARY\"}]}
                ]
              }"



