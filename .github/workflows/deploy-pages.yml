name: GEMINI_DEPLOY_GITHUB_PAGES_CD

on:
  workflow_run:
    workflows: ["ROBOT_TESTS_CI"]
    types:
      - completed

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    if: github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.conclusion == 'failure'
    
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: ‚¨áÔ∏è Download artifact from the completed workflow
        uses: actions/download-artifact@v4
        with:
          name: robot-test-reports
          path: public
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: ‚öôÔ∏è Configure Pages
        uses: actions/configure-pages@v5

      - name: üìä Check test results, send to Gemini and update report
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          # Verificar se os arquivos de relat√≥rio existem
          if [ ! -f public/output.xml ]; then
            echo "‚ö†Ô∏è Arquivo output.xml n√£o encontrado! Criando relat√≥rio b√°sico..."
            # Criar um relat√≥rio b√°sico se n√£o existir
            cat > public/report.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>Relat√≥rio de Testes - Arquivo n√£o encontrado</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; }
                    .error { color: red; background: #ffe6e6; padding: 20px; border-radius: 5px; }
                </style>
            </head>
            <body>
                <h1>Relat√≥rio de Testes Robot Framework</h1>
                <div class="error">
                    <h2>‚ö†Ô∏è Arquivo de relat√≥rio n√£o encontrado</h2>
                    <p>O arquivo output.xml n√£o foi gerado durante a execu√ß√£o dos testes.</p>
                    <p>Poss√≠veis causas:</p>
                    <ul>
                        <li>Os testes n√£o foram executados completamente</li>
                        <li>Erro na gera√ß√£o dos relat√≥rios</li>
                        <li>Problema na configura√ß√£o do Robot Framework</li>
                    </ul>
                </div>
            </body>
            </html>
            EOF
            exit 0
          fi

          # Verificar se o arquivo report.html existe
          if [ ! -f public/report.html ]; then
            echo "‚ö†Ô∏è Arquivo report.html n√£o encontrado! Gerando a partir do output.xml..."
            # Tentar gerar o relat√≥rio HTML a partir do output.xml
            robot --outputdir public --report report.html --log log.html public/output.xml || true
          fi

          # Processar resultados dos testes
          FAILED_COUNT=$(grep -oP 'fail="\K[0-9]+' public/output.xml | head -1)
          if [ -z "$FAILED_COUNT" ]; then
            FAILED_COUNT=0
          fi

          TOTAL_COUNT=$(grep -oP 'tests="\K[0-9]+' public/output.xml | head -1)
          if [ -z "$TOTAL_COUNT" ]; then
            TOTAL_COUNT=0
          fi

          echo "üìä Resultados dos testes: $FAILED_COUNT falhas de $TOTAL_COUNT total"

          # Preparar prompt para o Gemini
          if [ "$FAILED_COUNT" -eq 0 ]; then
            PROMPT="Todos os $TOTAL_COUNT testes passaram com sucesso. N√£o h√° erros. Pode confirmar que o sistema est√° saud√°vel?"
          else
            PROMPT="Foram encontrados $FAILED_COUNT erros em $TOTAL_COUNT testes automatizados. Abaixo est√° um trecho do relat√≥rio. Forne√ßa insights ou poss√≠veis causas para as falhas."
          fi

          # Tentar obter resumo do relat√≥rio
          if [ -f public/report.html ]; then
            SUMMARY=$(head -n 50 public/report.html | sed 's/"/\\"/g' | tr -d '\n')
          else
            SUMMARY="Relat√≥rio HTML n√£o dispon√≠vel. Verificando output.xml..."
          fi

          # Chamar API do Gemini se a chave estiver dispon√≠vel
          if [ -n "$GEMINI_API_KEY" ]; then
            echo "ü§ñ Enviando dados para an√°lise do Gemini AI..."
            
            RESPONSE=$(curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent" \
            -H "Content-Type: application/json" \
            -H "X-goog-api-key: $GEMINI_API_KEY" \
            -X POST \
            -d "{
                  \"contents\": [
                    {
                      \"parts\": [
                        {\"text\": \"$PROMPT\"},
                        {\"text\": \"$SUMMARY\"}
                      ]
                    }
                  ]
                }")

            INSIGHT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text // "N√£o foi poss√≠vel gerar insights no momento."')

            # Adicionar insights ao relat√≥rio se existir
            if [ -f public/report.html ]; then
              HTML_BLOCK="<div style='border: 2px solid #333; padding: 1em; margin: 1em 0; background: #f9f9f9;'><h2>üí° Insights gerados pelo Gemini AI</h2><p>$INSIGHT</p></div>"
              sed -i "/<\/body>/i $HTML_BLOCK" public/report.html
            fi
          else
            echo "‚ö†Ô∏è GEMINI_API_KEY n√£o configurada. Pulando an√°lise de IA."
          fi

      - name: üè† Create index.html if not exists
        run: |
          if [ ! -f public/index.html ]; then
            echo "üìÑ Criando arquivo index.html..."
            cat > public/index.html << 'EOF'
            <!DOCTYPE html>
            <html lang="pt-BR">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Relat√≥rios de Testes Robot Framework</title>
                <style>
                    body { 
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                        margin: 0; 
                        padding: 20px; 
                        background: #f5f5f5; 
                    }
                    .container { 
                        max-width: 1200px; 
                        margin: 0 auto; 
                        background: white; 
                        padding: 30px; 
                        border-radius: 10px; 
                        box-shadow: 0 2px 10px rgba(0,0,0,0.1); 
                    }
                    h1 { 
                        color: #333; 
                        text-align: center; 
                        margin-bottom: 30px; 
                    }
                    .file-list { 
                        background: #f8f9fa; 
                        padding: 20px; 
                        border-radius: 5px; 
                        margin: 20px 0; 
                    }
                    .file-item { 
                        margin: 10px 0; 
                        padding: 10px; 
                        background: white; 
                        border-left: 4px solid #007bff; 
                        border-radius: 3px; 
                    }
                    .file-item a { 
                        color: #007bff; 
                        text-decoration: none; 
                        font-weight: bold; 
                    }
                    .file-item a:hover { 
                        text-decoration: underline; 
                    }
                    .status { 
                        padding: 10px; 
                        border-radius: 5px; 
                        margin: 10px 0; 
                    }
                    .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
                    .warning { background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }
                    .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>ü§ñ Relat√≥rios de Testes Robot Framework</h1>
                    
                    <div class="status success">
                        <strong>‚úÖ Status:</strong> Relat√≥rios gerados com sucesso
                    </div>
                    
                    <div class="file-list">
                        <h3>üìÅ Arquivos Dispon√≠veis:</h3>
                        <div class="file-item">
                            <a href="report.html">üìä Relat√≥rio Principal (report.html)</a>
                            <br><small>Relat√≥rio detalhado dos testes executados</small>
                        </div>
                        <div class="file-item">
                            <a href="log.html">üìù Log Detalhado (log.html)</a>
                            <br><small>Log completo com todos os detalhes da execu√ß√£o</small>
                        </div>
                        <div class="file-item">
                            <a href="output.xml">üìÑ XML de Sa√≠da (output.xml)</a>
                            <br><small>Dados brutos em formato XML</small>
                        </div>
                        <div class="file-item">
                            <a href="browser/screenshot/">üì∏ Screenshots dos Testes</a>
                            <br><small>Capturas de tela durante a execu√ß√£o dos testes</small>
                        </div>
                    </div>
                    
                    <div class="status warning">
                        <strong>üí° Dica:</strong> Se algum arquivo n√£o estiver dispon√≠vel, verifique se os testes foram executados completamente.
                    </div>
                </div>
            </body>
            </html>
            EOF
          else
            echo "üìÑ Arquivo index.html j√° existe"
          fi

      - name: üì∏ Create screenshots gallery
        run: |
          if [ -d "public/browser/screenshot" ]; then
            echo "üì∏ Criando galeria de screenshots..."
            cat > public/browser/screenshot/index.html << 'EOF'
            <!DOCTYPE html>
            <html lang="pt-BR">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>üì∏ Screenshots dos Testes</title>
                <style>
                    body { 
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                        margin: 0; 
                        padding: 20px; 
                        background: #f5f5f5; 
                    }
                    .container { 
                        max-width: 1400px; 
                        margin: 0 auto; 
                        background: white; 
                        padding: 30px; 
                        border-radius: 10px; 
                        box-shadow: 0 2px 10px rgba(0,0,0,0.1); 
                    }
                    h1 { 
                        color: #333; 
                        text-align: center; 
                        margin-bottom: 30px; 
                    }
                    .gallery { 
                        display: grid; 
                        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); 
                        gap: 20px; 
                        margin: 20px 0; 
                    }
                    .screenshot-item { 
                        border: 1px solid #ddd; 
                        border-radius: 8px; 
                        overflow: hidden; 
                        background: white; 
                        box-shadow: 0 2px 5px rgba(0,0,0,0.1); 
                    }
                    .screenshot-item img { 
                        width: 100%; 
                        height: 200px; 
                        object-fit: cover; 
                        cursor: pointer; 
                        transition: transform 0.3s ease; 
                    }
                    .screenshot-item img:hover { 
                        transform: scale(1.05); 
                    }
                    .screenshot-info { 
                        padding: 15px; 
                    }
                    .screenshot-info h3 { 
                        margin: 0 0 10px 0; 
                        color: #333; 
                        font-size: 16px; 
                    }
                    .screenshot-info p { 
                        margin: 0; 
                        color: #666; 
                        font-size: 14px; 
                    }
                    .back-link { 
                        text-align: center; 
                        margin: 20px 0; 
                    }
                    .back-link a { 
                        color: #007bff; 
                        text-decoration: none; 
                        font-weight: bold; 
                        padding: 10px 20px; 
                        border: 2px solid #007bff; 
                        border-radius: 5px; 
                        transition: all 0.3s ease; 
                    }
                    .back-link a:hover { 
                        background: #007bff; 
                        color: white; 
                    }
                    .modal { 
                        display: none; 
                        position: fixed; 
                        z-index: 1000; 
                        left: 0; 
                        top: 0; 
                        width: 100%; 
                        height: 100%; 
                        background-color: rgba(0,0,0,0.9); 
                    }
                    .modal-content { 
                        margin: auto; 
                        display: block; 
                        max-width: 90%; 
                        max-height: 90%; 
                        margin-top: 5%; 
                    }
                    .close { 
                        position: absolute; 
                        top: 15px; 
                        right: 35px; 
                        color: #f1f1f1; 
                        font-size: 40px; 
                        font-weight: bold; 
                        cursor: pointer; 
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üì∏ Galeria de Screenshots dos Testes</h1>
                    
                    <div class="back-link">
                        <a href="../index.html">‚Üê Voltar ao Relat√≥rio Principal</a>
                    </div>
                    
                    <div class="gallery" id="screenshot-gallery">
                        <!-- Screenshots ser√£o inseridos aqui dinamicamente -->
                    </div>
                </div>

                <!-- Modal para visualiza√ß√£o em tamanho real -->
                <div id="imageModal" class="modal">
                    <span class="close">&times;</span>
                    <img class="modal-content" id="modalImage">
                </div>

                <script>
                    // Lista de screenshots (ser√° preenchida dinamicamente)
                    const screenshots = [];
                    
                    // Fun√ß√£o para carregar screenshots dinamicamente
                    function loadScreenshots() {
                        const gallery = document.getElementById('screenshot-gallery');
                        
                        // Simular carregamento de screenshots
                        // Em um ambiente real, isso seria feito via AJAX ou server-side
                        const commonScreenshots = [
                            'test-1.png', 'test-2.png', 'test-3.png', 'test-4.png',
                            'test-5.png', 'test-6.png', 'test-7.png', 'test-8.png',
                            'test-9.png', 'test-10.png', 'test-11.png', 'test-12.png',
                            'CTW-015-sucesso-1.png', 'failure_1.png'
                        ];
                        
                        commonScreenshots.forEach((filename, index) => {
                            const item = document.createElement('div');
                            item.className = 'screenshot-item';
                            item.innerHTML = `
                                <img src="${filename}" alt="Screenshot ${index + 1}" onclick="openModal(this.src)">
                                <div class="screenshot-info">
                                    <h3>${filename.replace('.png', '')}</h3>
                                    <p>Screenshot do teste ${index + 1}</p>
                                </div>
                            `;
                            gallery.appendChild(item);
                        });
                    }
                    
                    // Modal functions
                    function openModal(src) {
                        const modal = document.getElementById('imageModal');
                        const modalImg = document.getElementById('modalImage');
                        modal.style.display = "block";
                        modalImg.src = src;
                    }
                    
                    // Close modal
                    document.querySelector('.close').onclick = function() {
                        document.getElementById('imageModal').style.display = "none";
                    }
                    
                    // Load screenshots when page loads
                    window.onload = loadScreenshots;
                </script>
            </body>
            </html>
            EOF
          else
            echo "üì∏ Diret√≥rio de screenshots n√£o encontrado"
          fi

      - name: üìã List available files
        run: |
          echo "üìÅ Arquivos dispon√≠veis no diret√≥rio public:"
          ls -la public/ || echo "Diret√≥rio public n√£o existe"
          
          echo ""
          echo "üìä Verificando screenshots:"
          find public/ -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | head -10 || echo "Nenhum screenshot encontrado"
          
          echo ""
          echo "üìÑ Verificando relat√≥rios:"
          find public/ -name "*.html" -o -name "*.xml" -o -name "*.log" | head -10 || echo "Nenhum relat√≥rio encontrado"

      - name: üì¶ Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: üì¢ Publish to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
