#!/usr/bin/env python3
"""
Script para publicar relat√≥rios de testes no Confluence
Cria p√°ginas no Confluence com os resultados consolidados dos testes
"""

import json
import argparse
import logging
import sys
import os
import time
from pathlib import Path
from typing import Dict, List, Optional
from datetime import datetime
from atlassian import Confluence

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def validate_environment_variables() -> Dict[str, str]:
    """
    Valida e retorna as vari√°veis de ambiente necess√°rias
    
    Returns:
        Dict[str, str]: Dicion√°rio com as vari√°veis de ambiente
        
    Raises:
        ValueError: Se alguma vari√°vel obrigat√≥ria estiver faltando
    """
    required_vars = {
        'CONFLUENCE_URL': 'URL do Confluence',
        'CONFLUENCE_USERNAME': 'Nome de usu√°rio do Confluence',
        'CONFLUENCE_API_TOKEN': 'Token de API do Confluence',
        'SPACE_KEY': 'Chave do espa√ßo do Confluence',
        'PARENT_PAGE_ID': 'ID da p√°gina pai'
    }
    
    env_vars = {}
    missing_vars = []
    
    for var_name, description in required_vars.items():
        value = os.environ.get(var_name)
        if not value:
            missing_vars.append(f"{var_name} ({description})")
        else:
            env_vars[var_name] = value
    
    if missing_vars:
        raise ValueError(f"Vari√°veis de ambiente obrigat√≥rias n√£o encontradas: {', '.join(missing_vars)}")
    
    return env_vars

def create_confluence_client(url: str, username: str, api_token: str) -> Confluence:
    """
    Cria e retorna um cliente do Confluence
    
    Args:
        url: URL do Confluence
        username: Nome de usu√°rio
        api_token: Token de API
        
    Returns:
        Confluence: Cliente do Confluence configurado
    """
    try:
        confluence = Confluence(
            url=url,
            username=username,
            password=api_token,
            timeout=30
        )
        
        # Testar conex√£o de forma simples
        try:
            # Tentar obter informa√ß√µes b√°sicas do espa√ßo para testar a conex√£o
            space_info = confluence.get_space(space_key=os.environ.get('SPACE_KEY', 'TEST'))
            logger.info(f"Conex√£o com Confluence estabelecida com sucesso. Espa√ßo: {space_info.get('name', 'N/A')}")
        except Exception as e:
            logger.warning(f"N√£o foi poss√≠vel verificar o espa√ßo, mas continuando: {e}")
            logger.info("Conex√£o com Confluence estabelecida")
        
        return confluence
        
    except Exception as e:
        logger.error(f"Erro ao conectar com Confluence: {e}")
        raise

def generate_html_content(summary: Dict) -> str:
    """
    Gera conte√∫do HTML para a p√°gina do Confluence
    
    Args:
        summary: Dicion√°rio com os dados do resumo
        
    Returns:
        str: Conte√∫do HTML formatado
    """
    timestamp = datetime.fromisoformat(summary['timestamp']).strftime('%d/%m/%Y √†s %H:%M')
    
    # Estat√≠sticas gerais
    stats = summary['summary']
    success_rate = stats['success_rate']
    status_color = "green" if success_rate >= 80 else "orange" if success_rate >= 60 else "red"
    
    html = f"""
    <h1>üéØ Relat√≥rio de Testes Automatizados</h1>
    <p><em>Gerado em: {timestamp}</em></p>
    
    <h2>üìä Resumo Geral</h2>
    <table>
        <tr>
            <td><strong>Total de Testes:</strong></td>
            <td>{stats['total_tests']}</td>
        </tr>
        <tr>
            <td><strong>‚úÖ Passaram:</strong></td>
            <td style="color: green;">{stats['passed_tests']}</td>
        </tr>
        <tr>
            <td><strong>‚ùå Falharam:</strong></td>
            <td style="color: red;">{stats['failed_tests']}</td>
        </tr>
        <tr>
            <td><strong>‚è≠Ô∏è Ignorados:</strong></td>
            <td style="color: orange;">{stats['skipped_tests']}</td>
        </tr>
        <tr>
            <td><strong>üìà Taxa de Sucesso:</strong></td>
            <td style="color: {status_color}; font-weight: bold;">{success_rate}%</td>
        </tr>
    </table>
    """
    
    # Estat√≠sticas por fonte
    by_source = summary['by_source']
    html += "<h2>üîç Detalhamento por Fonte</h2><table>"
    html += "<tr><th>Fonte</th><th>Total</th><th>Passaram</th><th>Falharam</th></tr>"
    
    for source, stats in by_source.items():
        source_name = "Robot Framework" if source == "robot_framework" else "Postman/Newman"
        html += f"<tr><td>{source_name}</td><td>{stats['total']}</td><td style='color: green;'>{stats['passed']}</td><td style='color: red;'>{stats['failed']}</td></tr>"
    
    html += "</table>"
    
    # Detalhes das falhas
    failed_details = summary['failed_details']
    if failed_details:
        html += "<h2>üö® Detalhes das Falhas</h2>"
        html += "<table><tr><th>Nome do Teste</th><th>Fonte</th><th>Erro</th></tr>"
        
        for fail in failed_details:
            source_name = "Robot Framework" if fail.get('source') == 'robot_framework' else "Postman/Newman"
            error_msg = fail.get('error', 'Erro n√£o informado')
            html += f"<tr><td>{fail['name']}</td><td>{source_name}</td><td style='color: red;'>{error_msg}</td></tr>"
        
        html += "</table>"
    else:
        html += "<h2>üéâ Nenhuma Falha Encontrada!</h2>"
        html += "<p>Todos os testes passaram com sucesso! üöÄ</p>"
    
    return html

def publish_report(input_path: str, max_retries: int = 3) -> bool:
    """
    Publica relat√≥rio no Confluence
    
    Args:
        input_path: Caminho para o arquivo JSON com o resumo
        max_retries: N√∫mero m√°ximo de tentativas
        
    Returns:
        bool: True se a publica√ß√£o foi bem-sucedida, False caso contr√°rio
    """
    try:
        # Validar arquivo de entrada
        if not Path(input_path).exists():
            logger.error(f"Arquivo de entrada n√£o encontrado: {input_path}")
            return False
        
        # Carregar dados do resumo
        logger.info(f"Carregando dados do resumo: {input_path}")
        with open(input_path, 'r', encoding='utf-8') as f:
            summary = json.load(f)
        
        # Validar vari√°veis de ambiente
        env_vars = validate_environment_variables()
        
        # Criar cliente do Confluence
        confluence = create_confluence_client(
            env_vars['CONFLUENCE_URL'],
            env_vars['CONFLUENCE_USERNAME'],
            env_vars['CONFLUENCE_API_TOKEN']
        )
        
        # Gerar conte√∫do HTML
        content = generate_html_content(summary)
        
        # Gerar t√≠tulo da p√°gina
        title = f"Relat√≥rio de Testes - {datetime.now().strftime('%d/%m/%Y %H:%M')}"
        
        # Tentar publicar com retry logic
        for attempt in range(max_retries):
            try:
                logger.info(f"Tentativa {attempt + 1} de {max_retries} para publicar no Confluence")
                
                # Tentar criar p√°gina diretamente sem verificar exist√™ncia
                logger.info("Criando nova p√°gina no Confluence")
                result = confluence.create_page(
                    space=env_vars['SPACE_KEY'],
                    title=title,
                    body=content,
                    parent_id=env_vars['PARENT_PAGE_ID'],
                    type='page'
                )
                
                if result and 'id' in result:
                    logger.info(f"P√°gina publicada com sucesso: {title} (ID: {result['id']})")
                    return True
                else:
                    logger.warning("Resposta inesperada do Confluence")
                    raise Exception("Resposta inesperada do Confluence")
                
            except Exception as e:
                error_msg = str(e)
                logger.warning(f"Tentativa {attempt + 1} falhou: {error_msg}")
                
                # Se for erro de permiss√£o, n√£o tentar novamente
                if "permission" in error_msg.lower() or "not have permission" in error_msg.lower():
                    logger.error("Erro de permiss√£o detectado. Verifique as permiss√µes do usu√°rio no Confluence.")
                    return False
                
                if attempt < max_retries - 1:
                    time.sleep(2 ** attempt)  # Backoff exponencial
                else:
                    raise
        
    except ValueError as e:
        logger.error(f"Erro de configura√ß√£o: {e}")
        return False
    except Exception as e:
        logger.error(f"Erro inesperado durante a publica√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal do script"""
    parser = argparse.ArgumentParser(
        description='Publica relat√≥rios de testes no Confluence',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python publish_to_confluence.py --input resumo.json
  python publish_to_confluence.py -i analysis.json --retries 5
        """
    )
    
    parser.add_argument(
        '--input', '-i', 
        required=True,
        help='Caminho para o arquivo JSON com o resumo dos testes'
    )
    
    parser.add_argument(
        '--retries', '-r',
        type=int,
        default=3,
        help='N√∫mero m√°ximo de tentativas para publica√ß√£o (padr√£o: 3)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='Habilitar logs detalhados'
    )
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    success = publish_report(args.input, args.retries)
    
    if not success:
        logger.error("Falha na publica√ß√£o do relat√≥rio")
        sys.exit(1)
    
    logger.info("Publica√ß√£o conclu√≠da com sucesso!")

if __name__ == "__main__":
    main() 